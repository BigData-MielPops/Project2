MONGODB

import da csv:
inserimento:
mongoimport --db nomedb --collection nomecollezione --type csv --headerline --file percorso/file.csv

mongo (shell)

select:
mongo testing_db  --eval "db.customers.find({first_name:'Hosea'}).pretty().shellPrint()"

indexed search:
mongo testing_db  --eval "db.customers.find({_id:ObjectId('5968e6c759d6f49f66045aa7')}).pretty().shellPrint()"

aggregazione:
mongo testing_db  --eval 'db.customers.aggregate(    [      { $group: { "_id": "$first_name", "avg": { $avg: "$income" } } }    ] ).pretty().shellPrint();'

REDIS

mass import through protocol

https://redis.io/topics/mass-insert

https://codereview.stackexchange.com/questions/68612/store-csv-in-redis

inserimento:
cat /shared_data/mock_data_10000_rows2.csv | redis-cli --pipe

search: /

indexed search:
echo GET 0 | redis-cli

inserimento in set
cat /shared_data/mock_data_10000_set.csv | redis-cli --pipe

aggregazione:
echo zcount mylist -inf +inf | redis-cli

read:
echo keys * | redis-cli

join: /

NEO4J

import da csv:
https://neo4j.com/developer/guide-importing-data-and-etl/
https://neo4j.com/developer/guide-import-csv/

inserimento:
cp /shared_data/mock_data_10000_neo.csv /var/lib/neo4j/import
cat /shared_scripts/import_mock_10000.cypher | /var/lib/neo4j/bin/cypher-shell 

//non funziona:
// bin/neo4j-admin import --mode=csv --database=mock.db  --nodes:Customer import/mock_data_10000_neo.csv --id-type=string

enter cypher shell 
./cypher-shell

read:
echo "match (n) return n;" | /var/lib/neo4j/bin/cypher-shell 

select:
echo "MATCH (n) WHERE n.firstName = 'Hosea' RETURN n;" | /var/lib/neo4j/bin/cypher-shell 

select indexed:
echo "MATCH (n) WHERE ID(n) = 1 RETURN n;" | /var/lib/neo4j/bin/cypher-shell

aggregazione:
echo "match (n:Customer) return count(*);" | /var/lib/neo4j/bin/cypher-shell
echo "match (n:Customer) return avg(n.income);" | /var/lib/neo4j/bin/cypher-shell

prima del join: echo "MATCH (n:Customer) CREATE (n)-[r:Autoedge]->(n) RETURN r;" | /var/lib/neo4j/bin/cypher-shell
join:
echo "MATCH (n:Customer)-[:Autoedge]->(m:Customer) WHERE n.firstName = m.firstName RETURN n, m limit 5;" | /var/lib/neo4j/bin/cypher-shell

set mock.db active:
in conf/neo4j_conf
dbms.active_database = mock.db

in bin/neo4j stop e bin/neo4j start

ORIENTDB

#import da json:
#https://orientdb.com/docs/2.2/Import-from-JSON.html

import da csv:   <------ piÃ¹ semplice

scrivi configurazione etl in file json: import_orient_10000.json

comandi:
/orientdb/bin/oetl.sh /shared_scripts/import_orient_10000.json

check del db tramite console: /orientdb/bin/console.sh
connect to db: connect plocal:/temp/databases/mock admin admin
si interroga con query tipo: select * from Customer where income > 90

search:
/orientdb/bin/console.sh 'connect plocal:/temp/databases/mock admin admin; select from Customer where first_name = "Hosea"'

indexed search:
/orientdb/bin/console.sh 'connect plocal:/temp/databases/mock admin admin; select from Customer where Id = 1'

aggregazione:
/orientdb/bin/console.sh 'connect plocal:/temp/databases/mock admin admin; select avg(income) FROM Customer'

join:
???


CASSANDRA

import da csv:
https://docs.datastax.com/en/cql/3.1/cql/cql_reference/copy_r.html

comandi:
cqlsh -f /shared_scripts/import_mock_10000.cql

search:
cqlsh -k mock_keyspace -e "select * from customers where first_name = 'Hosea' allow filtering;"

indexed search:
cqlsh -k mock_keyspace -e "select * from customers where id = 1 allow filtering;"

aggregazione:
cqlsh -k mock_keyspace -e "select avg(income) as avg_income from customers;"

join:
/

POSTGRES

import da csv:

CREATE TABLE zip_codes 
(ZIP char(5), LATITUDE double precision, LONGITUDE double precision, 
CITY varchar, STATE char(2), COUNTY varchar, ZIP_CLASS varchar);
Copy data from your CSV file to the table:

COPY zip_codes FROM '/path/to/csv/ZIP_CODES.txt' DELIMITER ',' CSV;

per eseguire un singolo comando:
-c command
reference:
https://www.postgresql.org/docs/9.1/static/app-psql.html

http://docs.sqlalchemy.org/en/latest/


script in postgres_import.py

comandi utili per psql:
docker exec -it --user postgres postgres bash

\connect database-name
\list --> lista database
\dt --> lista table nel db
\q --> quit
query: select * from table;

postgres vuole utf-8

search:
psql -U postgres -d mock -c "SELECT * FROM customers where first_name = 'Hosea'"

indexed search:
SELECT * FROM customers where id = 1

aggregazione:
select avg(income) as avg_income from customers

join:
select * from customers a, customers b where a.first_name = b.first_name;


MYSQL

import csv:
https://dev.mysql.com/doc/refman/5.7/en/mysqlimport.html

http://docs.sqlalchemy.org/en/latest/

comandi utili per mysql:

log: mysql -u root -p password

show databases
use database_name
show tables

search:
 mysql -u root --password=password --database mock -e "SELECT * FROM customers where first_name = 'Hosea'"

indexed search:
SELECT * FROM customers where id = 1

aggregazione:
select avg(income) as avg_income from customers

join:
select * from customers a, customers b where a.first_name = b.first_name;

MEMSQL

https://docs.memsql.com/v5.8/docs/how-to-load-data-into-memsql

http://docs.sqlalchemy.org/en/latest/

log: memsql-shell

stessi comandi di mysql

search:
memsql-shell --database mock -e "SELECT * FROM customers where first_name = 'Hosea'"

indexed search:
memsql-shell --database mock -e "SELECT * FROM customers where id = 1"

aggregazione:
memsql-shell --database mock -e "select avg(income) as avg_income from customers"

join:
memsql-shell --database mock -e "select * from customers a, customers b where a.first_name = b.first_name;"

VOLTDB

import da csv:

csvloader nometablella -f nomefile.csv
https://docs.voltdb.com/UsingVoltDB/clicsvloader.php

https://docs.voltdb.com/UsingVoltDB/

comandi:

cat /shared_scripts/import_voltdb.sql | sqlcmd
/opt/voltdb/bin/csvloader customers -f /shared_data/mock_data_10000_rows.csv

COCKROACH

https://www.cockroachlabs.com/docs/stable/import-data.html

info:
cockroachdb://root@localhost:26257/mock

comandi utili:
./cockroach sql
\q --> quit

./cockroach sql --insecure --database=mock < file.sql

funziona:
./cockroach sql --insecure --execute="create database if not exists mock;"

psql -p 26257 -h 172.21.0.9 -d mock -U root < /shared_data/postgres_dump.sql


TRAFODION



NUODB

http://doc.nuodb.com/Latest/Content/NuoDB-Loader.htm